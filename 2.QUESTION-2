QUESTION 2. Write a program to count the number of occurrences of a given key in a singly linked 
list and then delete all the occurrences. For example, if given linked list is 1->2->1- 
>2->1->3->1 and given key is 1, then output should be 4. After deletion of all the 
occurrences of 1, the linked list is 2->2->3


#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

class SinglyLinkedList {
    Node* head;

public:
    SinglyLinkedList() {
        head = nullptr;
    }

    
    void insertAtEnd(int value) {
        Node* newNode = new Node{value, nullptr};
        if (head == nullptr) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr) temp = temp->next;
        temp->next = newNode;
    }

    
    void display() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL" << endl;
    }

    
    int countOccurrences(int key) {
        int count = 0;
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->data == key) count++;
            temp = temp->next;
        }
        return count;
    }

    
    void deleteAllOccurrences(int key) {
        
        while (head != nullptr && head->data == key) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }

        
        Node* current = head;
        while (current != nullptr && current->next != nullptr) {
            if (current->next->data == key) {
                Node* temp = current->next;
                current->next = current->next->next;
                delete temp;
            } else {
                current = current->next;
            }
        }
    }
};


int main() {
    SinglyLinkedList list;

    
    list.insertAtEnd(1);
    list.insertAtEnd(2);
    list.insertAtEnd(1);
    list.insertAtEnd(2);
    list.insertAtEnd(1);
    list.insertAtEnd(3);
    list.insertAtEnd(1);

    cout << "Original List: ";
    list.display();

    int key = 1;
    int count = list.countOccurrences(key);
    cout << "Occurrences of " << key << " = " << count << endl;

    list.deleteAllOccurrences(key);

    cout << "List after deleting all occurrences of " << key << ": ";
    list.display();

    return 0;
}
